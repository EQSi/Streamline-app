// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  username           String    @unique @db.VarChar(100)
  password           String
  roleId             String    
  role               Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  googleId           String?   @unique
  googleAccessToken  String?
  googleRefreshToken String?
  permissions        UserPermission[]
  employee           Employee?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([username])
  @@index([googleId])
}

model Employee {
  id                 String       @id @default(uuid())
  firstName          String    @db.VarChar(50)
  lastName           String    @db.VarChar(50)
  email              String    @unique @db.VarChar(100)
  phoneNumber        String?   @db.VarChar(20)
  position           Position  @default(ProjectManager)
  startDate          DateTime?
  salary             Decimal   @db.Decimal(10,2)
  status             EmployeeStatus @default(Active)
  address            String?   @db.VarChar(200)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(50)
  zipCode            String?   @db.VarChar(10)
  user               User      @relation(fields: [userId], references: [id])
  userId             String    @unique
  timeEntries         TimeEntry[]
  approvedTimeEntries TimeEntry[] @relation("TimeEntryApprovals")
  certifications     EmployeeCertification[]
  tasks              Task[]
  jobs               JobEmployee[]
  companyRatings     CompanyRating[]
  receipts           Receipt[]
  contacts           Contact[]
  notifications      Notification[]
  createdDocuments   Document[] @relation("EmployeeCreatedDocuments")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([email])
  @@index([userId])
}

model Role {
  id                String   @id @default(uuid())
  name              String   @unique @db.VarChar(50)
  permissionGroupId String   @db.Uuid
  permissionGroup   PermissionGroup @relation(fields: [permissionGroupId], references: [id], onDelete: Cascade)
  users             User[]
}

model PermissionGroup {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique @db.VarChar(50)
  permissions PermissionOnGroup[]
  roles       Role[]
}

model Permission {
  id   String  @id @default(uuid())
  name String  @unique
  users UserPermission[]
  permissionGroups PermissionOnGroup[]
}

model UserPermission {
  id           String      @id @default(uuid())
  userId       String
  permissionId String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
}

model PermissionOnGroup {
  id              String      @id @default(uuid())
  permissionId    String
  permissionGroupId String    @db.Uuid
  permission      Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionGroup PermissionGroup @relation(fields: [permissionGroupId], references: [id], onDelete: Cascade)
}


model TimeEntry {
  id            Int             @id @default(autoincrement())
  employee      Employee        @relation(fields: [employeeId], references: [id])
  employeeId    String
  type          TimeEntryType
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  breakMinutes  Int             @default(0)
  lunchMinutes  Int             @default(0)
  totalHours    Decimal         @db.Decimal(4,2)
  description   String?         @db.Text
  status        TimeEntryStatus @default(Pending)
  job           Job?            @relation(fields: [jobId], references: [id])
  jobId         Int?
  approvedBy    Employee?       @relation("TimeEntryApprovals", fields: [approvedById], references: [id])
  approvedById  String?
  approvedAt    DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([employeeId])
  @@index([jobId])
  @@index([date])
}

model Certification {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(100)
  dateIssued       DateTime
  expiryPeriod     Int
  issuingBody      String   @db.VarChar(100)
  description      String?  @db.Text
  employees        EmployeeCertification[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([name])
}

model EmployeeCertification {
  id               Int           @id @default(autoincrement())
  employee         Employee      @relation(fields: [employeeId], references: [id])
  employeeId       String
  certification    Certification @relation(fields: [certificationId], references: [id])
  certificationId  Int
  dateObtained     DateTime
  expiryDate       DateTime?
  status           CertStatus    @default(Valid)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@unique([employeeId, certificationId])
}

model Task {
  id               Int       @id @default(autoincrement())
  title            String    @db.VarChar(100)
  description      String    @db.Text
  status           TaskStatus @default(Pending)
  priority         Priority   @default(Medium)
  dueDate          DateTime?
  employee         Employee   @relation(fields: [employeeId], references: [id])
  employeeId       String
  job              Job?      @relation(fields: [jobId], references: [id])
  jobId            Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([title])
  @@index([employeeId])
  @@index([jobId])
}

model Job {
  id               Int           @id @default(autoincrement())
  title            String        @db.VarChar(100)
  description      String        @db.Text
  phase            JobPhase      @default(RequestForQuote)
  quoteNumber      String?       @db.VarChar(50)
  poNumber         String?       @db.VarChar(50)
  estimateAmount   Decimal?      @db.Decimal(10,2)
  contractAmount   Decimal?      @db.Decimal(10,2)
  requestDate      DateTime      // RFQ received
  bidDueDate       DateTime?
  bidSubmitDate    DateTime?
  approvalDate     DateTime?
  scheduledStart   DateTime?
  scheduledEnd     DateTime?
  actualStart      DateTime?
  actualEnd        DateTime?
  invoiceDate      DateTime?
  paymentDate      DateTime?
  estimateStatus   EstimateStatus? 
  isRushJob        Boolean        @default(false)
  location         Location      @relation(fields: [locationId], references: [id])
  locationId       Int
  template         JobTemplate?  @relation(fields: [templateId], references: [id])
  templateId       Int?
  company          Company       @relation(fields: [companyId], references: [id])
  companyId        Int
  tasks            Task[]
  employees        JobEmployee[]
  equipment        JobEquipment[]
  materials        JobMaterial[]
  invoices         Invoice[]
  receipts         Receipt[]
  contacts         Contact[]
  timeEntries      TimeEntry[]
  documents        Document[]

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([phase])
  @@index([quoteNumber])
  @@index([poNumber])
  @@index([requestDate])
  @@index([bidDueDate])
  @@index([scheduledStart])
  @@index([scheduledEnd])
}

model JobEmployee {
  id               Int      @id @default(autoincrement())
  job              Job      @relation(fields: [jobId], references: [id])
  jobId            Int
  employee         Employee @relation(fields: [employeeId], references: [id])
  employeeId       String
  role             JobRole  @default(Worker)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([jobId, employeeId])
}


model JobTemplate {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  description   String    @db.Text
  tasks         Json      // Stores template tasks
  materials     Json      // Stores required materials
  equipment     Json      // Stores required equipment
  jobs          Job[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([name])
}

model Equipment {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(100)
  type          String         @db.VarChar(50)
  status        EquipmentStatus @default(Available)
  jobs          JobEquipment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([name])
  @@index([type])
}

model JobEquipment {
  id            Int       @id @default(autoincrement())
  job           Job       @relation(fields: [jobId], references: [id])
  jobId         Int
  equipment     Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId   Int
  quantity      Int
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([jobId, equipmentId])
}

model Material {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(100)
  unit          String         @db.VarChar(20)
  unitPrice     Decimal        @db.Decimal(10,2)
  jobs          JobMaterial[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([name])
}

model JobMaterial {
  id            Int       @id @default(autoincrement())
  job           Job       @relation(fields: [jobId], references: [id])
  jobId         Int
  material      Material  @relation(fields: [materialId], references: [id])
  materialId    Int
  quantity      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([jobId, materialId])
}

model Invoice {
  id            Int           @id @default(autoincrement())
  job           Job           @relation(fields: [jobId], references: [id])
  jobId         Int
  number        String        @unique
  status        InvoiceStatus @default(Draft)
  issuedDate    DateTime
  dueDate       DateTime
  totalAmount   Decimal       @db.Decimal(10,2)
  lineItems     InvoiceItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([jobId])
  @@index([issuedDate])
  @@index([dueDate])
}

model InvoiceItem {
  id            Int       @id @default(autoincrement())
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId     Int
  description   String    @db.Text
  quantity      Int
  unitPrice     Decimal   @db.Decimal(10,2)
  amount        Decimal   @db.Decimal(10,2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([invoiceId])
}

model Receipt {
  id            Int       @id @default(autoincrement())
  job           Job       @relation(fields: [jobId], references: [id])
  jobId         Int
  amount        Decimal   @db.Decimal(10,2)
  date          DateTime
  description   String    @db.Text
  imageUrl      String?
  employee      Employee  @relation(fields: [employeeId], references: [id])
  employeeId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([jobId])
  @@index([employeeId])
  @@index([date])
}


model Company {
  id               Int           @id @default(autoincrement())
  name             String        @unique @db.VarChar(100)
  type             CompanyType
  hasDivisions     Boolean       @default(false)
  status           CompanyStatus @default(ACTIVE)
  divisions        Division[]
  locationAssignments LocationAssignment[]
  contracts        Contract[]
  contacts         Contact[]
  jobs             Job[]
  ratings          CompanyRating[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([name])
  @@index([type])
}

model Division {
  id               Int           @id @default(autoincrement())
  name             String        @db.VarChar(100)
  company          Company       @relation(fields: [companyId], references: [id])
  companyId        Int
  locationAssignments LocationAssignment[]
  contracts        Contract[]
  contacts         Contact[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@unique([name, companyId])
  @@index([companyId])
}

model Location {
  id               Int           @id @default(autoincrement())
  locationAssignments LocationAssignment[]
  jobs             Job[]
  street1          String        @db.VarChar(200)
  street2          String        @db.VarChar(200)
  city             String        @db.VarChar(100)
  state            String        @db.VarChar(50)
  zipCode          String        @db.VarChar(10)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model LocationAssignment {
  id          Int      @id @default(autoincrement())
  location    Location @relation(fields: [locationId], references: [id])
  locationId  Int
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   Int?
  division    Division? @relation(fields: [divisionId], references: [id])
  divisionId  Int?

  @@unique([locationId, companyId, divisionId])
  @@index([locationId])
  @@index([companyId])
  @@index([divisionId])
}


model CompanyRating {
  id               Int           @id @default(autoincrement())
  company          Company       @relation(fields: [companyId], references: [id])
  companyId        Int
  employee         Employee      @relation(fields: [employeeId], references: [id])
  employeeId       String
  category         RatingCategory
  rating           Int           // 1-5 scale
  comment          String?       @db.Text
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@unique([companyId, employeeId])
  @@index([rating])
}

enum RatingCategory {
  QUALITY
  RELIABILITY
  COMMUNICATION
  PRICING
  OVERALL
}

model Contract {
  id               Int           @id @default(autoincrement())
  company          Company       @relation(fields: [companyId], references: [id])
  companyId        Int
  division         Division?     @relation(fields: [divisionId], references: [id])
  divisionId       Int?
  title            String        @db.VarChar(100)
  description      String        @db.Text
  startDate        DateTime
  endDate          DateTime?
  status           ContractStatus @default(Active)
  rates            ContractRate[]
  documents        Document[]    
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([companyId])
  @@index([divisionId])
  @@index([title])
  @@index([startDate])
  @@index([endDate])
}

model ContractRate {
  id               Int           @id @default(autoincrement())
  contract         Contract      @relation(fields: [contractId], references: [id])
  contractId       Int
  description      String        @db.VarChar(200)
  rate             Decimal       @db.Decimal(10,2)
  unit             String        @db.VarChar(20)  // hourly, daily, per item etc
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([contractId])
}

model Contact {
  id            Int         @id @default(autoincrement())
  type          ContactType
  firstName     String      @db.VarChar(50)
  lastName      String      @db.VarChar(50)
  email         String?     @db.VarChar(100)
  phoneNumber   String      @db.VarChar(20)
  title         String?     @db.VarChar(100)
  notes         String?     @db.Text
  company       Company?    @relation(fields: [companyId], references: [id])
  companyId     Int?
  division      Division?   @relation(fields: [divisionId], references: [id])
  divisionId    Int?
  job           Job?        @relation(fields: [jobId], references: [id])
  jobId         Int?
  employee      Employee?   @relation(fields: [employeeId], references: [id])
  employeeId    String?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([companyId])
  @@index([jobId])
  @@index([employeeId])
  @@index([firstName])
  @@index([lastName])
}

model Setting {
  id          Int             @id @default(autoincrement())
  key         String          @unique
  value       String          @db.Text
  category    SettingCategory
  isEncrypted Boolean         @default(false)
  description String?         @db.Text
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([category])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  entityType  String   // Table name
  entityId    Int      // Record ID
  action      String   // Create/Update/Delete
  userId      Int      // Who made the change
  changes     Json     // Before/After values
  createdAt   DateTime @default(now())

  @@index([entityType, entityId])
  @@index([userId])
}

model Document {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  type        DocumentType
  url         String
  fileSize    Int
  mimeType    String   @db.VarChar(50)
  job         Job?     @relation(fields: [jobId], references: [id])
  jobId       Int?
  contract    Contract? @relation(fields: [contractId], references: [id])
  contractId  Int?
  createdBy   Employee @relation("EmployeeCreatedDocuments", fields: [employeeId], references: [id])
  employeeId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
}

model Notification {
  id          Int       @id @default(autoincrement())
  type        NotificationType
  title       String    @db.VarChar(100)
  message     String    @db.Text
  isRead      Boolean   @default(false)
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  createdAt   DateTime  @default(now())

  @@index([employeeId, isRead])
}

enum ContactType {
  JobContact
  CompanyContact
  EmployeeContact
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ContractStatus {
  Draft
  Active
  Expired
  Terminated
  OnHold
}

enum EquipmentStatus {
  Available
  InUse
  Maintenance
  Retired
}

enum InvoiceStatus {
  Draft
  Sent
  Paid
  Overdue
  Cancelled
}

enum CertStatus {
  Valid
  Expired
  Revoked
  Pending
}

enum TaskStatus {
  Pending
  InProgress
  Completed
  OnHold
  Cancelled
}

enum Priority {
  Low
  Medium
  High
  Urgent
}

enum JobStatus {
  Pending
  InProgress
  Completed
  OnHold
  Cancelled
}

enum JobRole {
  Leader
  Worker
  Support
}

enum CompanyType {
  Customer
  Subcontractor
  Vendor
}

enum EmployeeStatus {
  Active
  OnLeave
  Terminated
  Suspended
}


enum Position {
  ProjectManager
  FieldManager
  FieldTechnicianL1
  FieldTechnicianL2
  FieldTechnicianL3
  OfficeStaff
  Owner
}

enum TimeEntryType {
  FieldWork
  OfficeWork
}

enum TimeEntryStatus {
  Pending
  Approved
  Rejected
  Modified
}

enum JobPhase {
  RequestForQuote
  Estimating
  BidSubmitted
  Approved
  Scheduled
  InProgress
  Completed
  Invoiced
  PaidInFull
}

enum EstimateStatus {
  Draft
  Submitted
  Accepted
  Rejected
  Revised
}

enum SettingCategory {
  General
  Notifications
  Security
  Integration
  Billing
  Company
}

enum DocumentType {
  Contract
  Invoice
  Receipt
  Proposal
  Certificate
  Other
}

enum NotificationType {
  TaskAssigned
  JobUpdate
  CertificationExpiring
  TimeApproval
  SystemAlert
}